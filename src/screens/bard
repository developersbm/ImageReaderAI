/*
import React, { useState, useLayoutEffect, useCallback, useEffect } from 'react';
import { GiftedChat } from 'react-native-gifted-chat';
import { View, Text } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import * as Network from 'expo-network';

const analyzeImage = async (imageURI) => {
  try {
    const isConnected = await Network.getNetworkStateAsync();
    if (!isConnected.isInternetReachable) {
      throw new Error('No internet connection.');
    }

    const response = await fetch(`https://api.bard.ai/v1/analyses?image=${imageURI}`);
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error analyzing image:', error);
    throw error;
  }
};

export default function Chat({ route }) {
  const { imageURI } = route.params;
  const [messages, setMessages] = useState([]);
  const [analysisResults, setAnalysisResults] = useState(null);
  const navigation = useNavigation();

  useLayoutEffect(() => {
    navigation.setOptions({
      headerRight: () => null, // Remove the header right component
    });
  }, [navigation]);

  useEffect(() => {
    // Create the initial message
    const initialMessage = {
      _id: 1,
      text: 'Hello this is the image you choose. Please make any questions!',
      createdAt: new Date(),
      user: {
        _id: 2,
        name: 'Chat Bot',
        avatar: 'src/screens/components/Logo.png',
      },
    };

    // Create the initial image message
    const initialImageMessage = {
      _id: 2,
      image: imageURI,
      createdAt: new Date(),
      user: {
        _id: 2,
        name: 'Chat Bot',
        avatar: 'src/screens/components/Logo.png',
      },
    };

    // Set the initial messages as an array containing both initial and image messages
    setMessages([initialMessage, initialImageMessage]);

    // Call the analyzeImage function when the component mounts
    analyzeImage(imageURI)
      .then((data) => {
        // Update the analysisResults state with the results
        setAnalysisResults(data.results.summary);
      })
      .catch((error) => {
        console.error('Error analyzing image:', error);
      });
  }, [imageURI]);

  const onSend = useCallback((messages = []) => {
    setMessages((previousMessages) => {
      const newMessages = GiftedChat.append(previousMessages, messages);
      newMessages.push({
        _id: 3,
        text: analysisResults || '', // Use the analysis results or an empty string if it's not available yet
        createdAt: new Date(),
        user: {
          _id: 2,
          name: 'Chat Bot',
          avatar: 'src/screens/components/Logo.png',
        },
      });
      return newMessages;
    });
  }, [analysisResults]);

  return (
    <GiftedChat
      messages={messages}
      showAvatarForEveryMessage={false}
      showUserAvatar={false}
      onSend={messages => onSend(messages)}
      messagesContainerStyle={{ backgroundColor: '#fff' }}
      textInputStyle={{
        backgroundColor: '#fff',
        borderRadius: 20,
      }}
      // Render the analysis results in the chat
      renderCustomView={(props) => {
        if (props.currentMessage.text === analysisResults) {
          return (
            <View style={{ alignSelf: 'center', marginBottom: 10 }}>
              <Text>{analysisResults}</Text>
            </View>
          );
        }
        return null;
      }}
    />
  );
}








import { View, Text, StyleSheet, FlatList, TextInput, TouchableOpacity } from 'react-native';
import React, { useState } from 'react';
import axios from 'axios';

const ChatGPT = () => {
  const [data, setData] = useState([]);
  const apiKey = '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';
  const apiUrl = 'https://api.openai.com/v1/engines/text-davinci-002/completions';
  const [textInput, setTextInput]  = useState('');
  
  const handleSend = async () => {
    const prompt = textInput; // Fixed typo
    const response = await axios.post(apiUrl, {
      prompt: prompt,
      max_tokens: 1024, // Fixed typo
      temperature: 0.5, // Fixed typo
    }, {
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`
      }
    });
    const text = response.data.choices[0].text;
    setData([...data, {type: 'user', 'text': textInput}, {type: 'bot', 'text': text}]);
    setTextInput('');
  }
  
  return (
    <View style={styles.container}>
      <FlatList
        data={data}
        keyExtractor={(item, index) => index.toString()} // Fixed syntax
        style={styles.body}
        renderItem={({item}) => (
          <View style={{flexDirection: 'row', padding: 10}}>
            <Text style={{fontWeight: 'bold', color: item.type === 'user' ? 'green' : 'red'}}>
              {item.type === 'user' ? 'Ninza: ' : 'Bot: '}
            </Text>
            <Text style={styles.bot}>{item.text}</Text>
          </View>
        )}
      />
      <TextInput
        style={styles.input}
        value={textInput}
        onChangeText={text => setTextInput(text)}
        placeholder='Ask me anything'
      />
      <TouchableOpacity
        style={styles.button}
        onPress={handleSend}
      >
        <Text style={styles.buttonText}>Let's Go</Text>
      </TouchableOpacity>
    </View>
  )
}

export default ChatGPT;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
  },
  title: {
    fontSize: 28,
    marginBottom: 20,
    marginTop: 70,
  },
  body: {
    backgroundColor: '#fff',
    width: '102%',
    margin: 10
  },
  bot: {
    fontSize: 16
  },
  input: {
    borderWidth: 1,
    borderColor: 'black',
    width: '90%',
    height: 60,
    marginBottom: 10,
    borderRadius: 10
  },
  button: {
    backgroundColor: 'yellow',
    width: '90%',
    height: 60,
    borderRadius: 10,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 10
  },
  buttonText: {
    fontSize: 25,
    fontWeight: 'bold',
    color: 'blue',
  },
});

*/